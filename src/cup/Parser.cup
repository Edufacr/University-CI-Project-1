/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error de Verdad")
        System.out.println("Error de Sintaxis: "+ s.value + " Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error de Sintaxis: "+ s.value + " Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal SEMICOLON, ID, COMMA, ASSIGN, RBRACK, LBRACK, CONST, INT, CHAR, STATIC, LONG, SHORT;        // our scanner provides numbers as integers
terminal Integer NUMCONST;

/* Non terminals */
non terminal program, decs, vars, varDecl, constKey, scopedVarDecl, varDeclInit, varDeclId, typeSpec, functions, varDeclList, simpleExp;

//non terminal Integer    expr;      // used to store evaluated subexpressions

/* The grammar rules */

program ::= decs;
decs ::= functions
        | vars functions |vars;

vars ::= vars varDecl | ; //epsilon
varDecl ::= constKey typeSpec varDeclList SEMICOLON;
constKey ::= CONST | /*nada*/ ; //epsilon

scopedVarDecl ::= STATIC typeSpec varDeclList SEMICOLON 
                | typeSpec varDeclList SEMICOLON; //mas adelante

varDeclList ::= varDeclList COMMA varDeclInit 
            | varDeclInit;

varDeclInit ::= varDeclId 
            | varDeclId ASSIGN NUMCONST;

varDeclId ::= ID 
            | ID LBRACK NUMCONST RBRACK;

typeSpec ::=  INT 
            | CHAR 
            | LONG 
            | SHORT;