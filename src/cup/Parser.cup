/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error de Sintaxis: "+ s.value + " Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Unrecovered Syntax Error: "+ s.value + " Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
:}

/* 
--------------
Terminals
--------------
*/

// Identifiers
terminal IDENTIFIER; 
// Special Symbols
terminal SEMICOLON, ASSIGN, COMMA, RBRACK, LBRACK, LPAREN, RPAREN, LCURLY, RCURLY;
// Mandatory Reserved Words
terminal CONST, BREAK, CASE, CONTINUE, DEFAULT, DO, ELSE, FOR, IF, RETURN, SWITCH, VOID, WHILE;
// Mandatory Types
terminal CHAR, INT, LONG, SHORT;
// Mandatory Functions
terminal READ, WRITE;
// Numeric Operators

//Boolean Operators

//Literals
terminal Integer NUMCONST;

// Extra Reserved Words
terminal STATIC;

/* 
--------------
 Non terminals
--------------
*/

// Program Structure
non terminal program, decls, vars, functions, functions_;

// Const & Vars Declaration
non terminal constDecl, varDecl, varDeclList;

// Literals
non terminal literals;
// Types
non terminal typeSpec;
non terminal funcTypes;

// Functions
non terminal funcDecl, funcBody, paramList, params, otherFunctions, functionOne;
non terminal stmt;

start with program;
/* 
--------------
Grammar Rules
--------------
*/

// Program Structure
program  ::=       decls;

decls    ::=      vars 
                  | functions;
              //  | vars; // TODO: hay que quitarlo

vars    ::=       vars varDecl
                | vars constDecl
                | varDecl
                | constDecl;
             //   | ; //epsilon

// Const & Vars Declaration
constDecl ::=     CONST typeSpec IDENTIFIER ASSIGN literals SEMICOLON;

varDecl   ::=     typeSpec varDeclList SEMICOLON
                | error SEMICOLON; // Tirar un error hasta ; pero se recupera 

varDeclList ::=   varDeclList COMMA IDENTIFIER 
               | IDENTIFIER;


// Functions
functions ::=       functions funcDecl
                 |  funcDecl;

funcDecl ::=      typeSpec IDENTIFIER LPAREN params RPAREN LCURLY RCURLY
                | VOID IDENTIFIER LPAREN params RPAREN LCURLY RCURLY;

paramList ::=      typeSpec IDENTIFIER COMMA paramList
                |  typeSpec IDENTIFIER;

params ::=        paramList 
                | ; //epsilon

// Literals
literals ::=      NUMCONST;

// Types
typeSpec ::=      INT 
                | CHAR 
                | LONG 
                | SHORT;